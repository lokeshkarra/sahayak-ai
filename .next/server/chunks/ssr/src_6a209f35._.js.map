{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,gKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG,gKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,gKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,gKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/app/%28protected%29/page.tsx"],"sourcesContent":["// \"use client\";\n\n// import { useState, useEffect } from \"react\";\n// import Link from \"next/link\";\n// import {\n//   Wallet,\n//   Landmark,\n//   TrendingUp,\n//   BadgeCheck,\n//   PiggyBank,\n//   Gem,\n// } from \"lucide-react\";\n// import { SummaryCard } from \"@/components/dashboard/summary-card\";\n// import { NetWorthChart } from \"@/components/dashboard/net-worth-chart\";\n// import { InsightsAgent } from \"@/components/dashboard/insights-agent\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardHeader, CardTitle, CardContent, CardDescription } from \"@/components/ui/card\";\n// import { McpClient } from \"@/services/mcp-client\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n\n\n// interface DashboardData {\n//   totalAssets: number;\n//   totalLiabilities: number;\n//   netWorth: number;\n//   creditScore: number | null;\n//   epfBalance: number | null;\n// }\n\n// export default function DashboardPage() {\n//   const [data, setData] = useState<DashboardData | null>(null);\n//   const [isLoading, setIsLoading] = useState(true);\n//   const { toast } = useToast();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setIsLoading(true);\n//       try {\n//         const client = new McpClient();\n        \n//         // Fetch all data in parallel\n//         const [netWorthData, creditData, epfData] = await Promise.all([\n//           client.callTool(\"fetch_net_worth\"),\n//           client.callTool(\"fetch_credit_report\"),\n//           client.callTool(\"fetch_epf_details\"),\n//         ]);\n\n//         const assets = netWorthData.netWorthResponse.assetValues.reduce((acc: number, asset: any) => acc + Number(asset.value.units), 0);\n//         const liabilities = netWorthData.netWorthResponse.liabilityValues.reduce((acc: number, asset: any) => acc + Number(asset.value.units), 0);\n        \n//         // Safely access credit score\n//         const creditScore = creditData.creditReport?.creditScore ? Number(creditData.creditReport.creditScore) : null;\n        \n//         // Safely access EPF balance\n//         const epfBalance = epfData.epfResponse?.epfDetails?.[0]?.balance?.units \n//             ? Number(epfData.epfResponse.epfDetails[0].balance.units) \n//             : null;\n\n//         setData({\n//           totalAssets: assets,\n//           totalLiabilities: liabilities,\n//           netWorth: Number(netWorthData.netWorthResponse.totalNetWorthValue.units),\n//           creditScore: creditScore,\n//           epfBalance: epfBalance,\n//         });\n\n//       } catch (error: any) {\n//         console.error(\"Failed to fetch dashboard data:\", error);\n//         toast({\n//           title: \"Error Fetching Data\",\n//           description: \"Could not connect to the MCP server. Please ensure it is running and you are logged in.\",\n//           variant: \"destructive\",\n//         });\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [toast]);\n\n\n//   return (\n//     <div className=\"flex flex-col gap-6\">\n//        <Card>\n//         <CardHeader className=\"flex-row items-center justify-between\">\n//           <div>\n//             <CardTitle>Dashboard</CardTitle>\n//             <CardDescription>Your strategic financial overview.</CardDescription>\n//           </div>\n//           <Button asChild>\n//             <Link href=\"/assets\">\n//               <Gem className=\"mr-2\" />\n//               Manage Net Worth\n//             </Link>\n//           </Button>\n//         </CardHeader>\n//       </Card>\n      \n//       {isLoading ? (\n//         <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//         </div>\n//       ) : data ? (\n//         <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n//             <SummaryCard\n//             title=\"Assets\"\n//             value={`₹${data.totalAssets.toLocaleString(\"en-IN\")}`}\n//             Icon={Wallet}\n//             />\n//             <SummaryCard\n//             title=\"Liabilities\"\n//             value={`₹${data.totalLiabilities.toLocaleString(\"en-IN\")}`}\n//             Icon={Landmark}\n//             />\n//             <SummaryCard\n//             title=\"My Net Worth\"\n//             value={`₹${data.netWorth.toLocaleString(\"en-IN\")}`}\n//             Icon={TrendingUp}\n//             />\n//             <SummaryCard\n//             title=\"Credit Score\"\n//             value={data.creditScore ? String(data.creditScore) : \"N/A\"}\n//             Icon={BadgeCheck}\n//             />\n//             <SummaryCard\n//             title=\"EPF Balance\"\n//             value={data.epfBalance ? `₹${data.epfBalance.toLocaleString(\"en-IN\")}` : \"N/A\"}\n//             Icon={PiggyBank}\n//             />\n//         </div>\n//       ) : (\n//          <Card>\n//             <CardContent className=\"pt-6\">\n//                 <p>Could not load your financial overview. Please make sure the MCP server is running and try again.</p>\n//             </CardContent>\n//         </Card>\n//       )}\n\n//       <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-4\">\n//         <NetWorthChart />\n//         <InsightsAgent />\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n// \"use client\";\n\n// import { useState, useEffect } from \"react\";\n// import Link from \"next/link\";\n// import {\n//   Wallet,\n//   Landmark,\n//   TrendingUp,\n//   BadgeCheck,\n//   PiggyBank,\n//   Gem,\n// } from \"lucide-react\";\n// import { SummaryCard } from \"@/components/dashboard/summary-card\";\n// import { NetWorthChart } from \"@/components/dashboard/net-worth-chart\";\n// import { InsightsAgent } from \"@/components/dashboard/insights-agent\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardHeader, CardTitle, CardContent, CardDescription } from \"@/components/ui/card\";\n// import { McpClient } from \"@/services/mcp-client\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n\n\n// interface DashboardData {\n//   totalAssets: number;\n//   totalLiabilities: number;\n//   netWorth: number;\n//   creditScore: number | null;\n//   epfBalance: number | null;\n// }\n\n// export default function DashboardPage() {\n//   const [data, setData] = useState<DashboardData | null>(null);\n//   const [isLoading, setIsLoading] = useState(true);\n//   const { toast } = useToast();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setIsLoading(true);\n//       try {\n//         const client = new McpClient();\n        \n//         // Fetch all data in parallel\n//         const [netWorthData, creditData, epfData] = await Promise.all([\n//           client.callTool(\"fetch_net_worth\"),\n//           client.callTool(\"fetch_credit_report\"),\n//           client.callTool(\"fetch_epf_details\"),\n//         ]);\n\n//         const assets = netWorthData.netWorthResponse.assetValues.reduce((acc: number, asset: any) => acc + Number(asset.value.units), 0);\n//         const liabilities = netWorthData.netWorthResponse.liabilityValues.reduce((acc: number, asset: any) => acc + Number(asset.value.units), 0);\n        \n//         // Safely access credit score\n//         const creditScore = creditData.creditReport?.creditScore ? Number(creditData.creditReport.creditScore) : null;\n        \n//         // Safely access EPF balance\n//         const epfBalance = epfData.epfResponse?.epfDetails?.[0]?.balance?.units \n//             ? Number(epfData.epfResponse.epfDetails[0].balance.units) \n//             : null;\n\n//         setData({\n//           totalAssets: assets,\n//           totalLiabilities: liabilities,\n//           netWorth: Number(netWorthData.netWorthResponse.totalNetWorthValue.units),\n//           creditScore: creditScore,\n//           epfBalance: epfBalance,\n//         });\n\n//       } catch (error: any) {\n//         console.error(\"Failed to fetch dashboard data:\", error);\n//         toast({\n//           title: \"Error Fetching Data\",\n//           description: \"Could not connect to the MCP server. Please ensure it is running and you are logged in.\",\n//           variant: \"destructive\",\n//         });\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [toast]);\n\n\n//   return (\n//     <div className=\"flex flex-col gap-6\">\n//        <Card>\n//         <CardHeader className=\"flex-row items-center justify-between\">\n//           <div>\n//             <CardTitle>Dashboard</CardTitle>\n//             <CardDescription>Your strategic financial overview.</CardDescription>\n//           </div>\n//           <Button asChild>\n//             <Link href=\"/assets\">\n//               <Gem className=\"mr-2\" />\n//               Manage Assets\n//             </Link>\n//           </Button>\n//         </CardHeader>\n//       </Card>\n      \n//       {isLoading ? (\n//         <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//             <Skeleton className=\"h-28\" />\n//         </div>\n//       ) : data ? (\n//         <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n//             <SummaryCard\n//             title=\"Assets\"\n//             value={`₹${data.totalAssets.toLocaleString(\"en-IN\")}`}\n//             Icon={Wallet}\n//             />\n//             <SummaryCard\n//             title=\"Liabilities\"\n//             value={`₹${data.totalLiabilities.toLocaleString(\"en-IN\")}`}\n//             Icon={Landmark}\n//             />\n//             <SummaryCard\n//             title=\"My Net Worth\"\n//             value={`₹${data.netWorth.toLocaleString(\"en-IN\")}`}\n//             Icon={TrendingUp}\n//             />\n//             <SummaryCard\n//             title=\"Credit Score\"\n//             value={data.creditScore ? String(data.creditScore) : \"N/A\"}\n//             Icon={BadgeCheck}\n//             />\n//             <SummaryCard\n//             title=\"EPF Balance\"\n//             value={data.epfBalance ? `₹${data.epfBalance.toLocaleString(\"en-IN\")}` : \"N/A\"}\n//             Icon={PiggyBank}\n//             />\n//         </div>\n//       ) : (\n//          <Card>\n//             <CardContent className=\"pt-6\">\n//                 <p>Could not load your financial overview. Please make sure the MCP server is running and try again.</p>\n//             </CardContent>\n//         </Card>\n//       )}\n\n//       <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-4\">\n//         <NetWorthChart />\n//         <InsightsAgent />\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n// \"use client\";\n\n// import { useState, useEffect } from \"react\";\n// import { useRouter } from \"next/navigation\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n// import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n// import { Loader, TrendingUp, TrendingDown, Briefcase } from \"lucide-react\";\n// import { Logo } from \"@/components/logo\";\n\n// // --- TYPE DEFINITIONS (based on your JSON data) ---\n// interface Value {\n//   currencyCode: string;\n//   units: string;\n// }\n\n// interface AssetValue {\n//   netWorthAttribute: string;\n//   value: Value;\n// }\n\n// interface LiabilityValue {\n//   netWorthAttribute: string;\n//   value: Value;\n// }\n\n// interface AccountDetailsInfo {\n//     maskedAccountNumber: string;\n//     accInstrumentType: string;\n//     fipMeta: {\n//         displayName: string;\n//     }\n//     depositSummary?: {\n//         currentBalance: Value;\n//     }\n//     equitySummary?: {\n//         currentValue: Value;\n//     }\n// }\n\n// interface NetWorthData {\n//   assetValues: AssetValue[];\n//   liabilityValues: LiabilityValue[];\n//   totalNetWorthValue: Value;\n//   accountDetailsBulkResponse?: { // This can be optional\n//       accountDetailsMap: Record<string, { accountDetails: AccountDetailsInfo }>;\n//   }\n// }\n\n// type BankTransaction = [string, string, string, number, string, string];\n\n// interface BankTransactionsData {\n//   bankTransactions: {\n//     bank: string;\n//     txns: BankTransaction[];\n//   }[];\n// }\n\n// interface CreditAccountDetails {\n//     subscriberName: string;\n//     accountType: string;\n//     highestCreditOrOriginalLoanAmount: string;\n//     currentBalance: string;\n//     amountPastDue: string;\n// }\n\n// interface CreditReportData {\n//     creditReportData: {\n//         creditAccount: {\n//             creditAccountDetails: CreditAccountDetails[];\n//         }\n//         score: {\n//             bureauScore: string;\n//         }\n//     }\n// }\n\n// interface EPFEstablishment {\n//     est_name: string;\n//     pf_balance: {\n//         net_balance: string;\n//     }\n// }\n\n// interface EPFData {\n//     uanAccounts: {\n//         rawDetails: {\n//             est_details: EPFEstablishment[];\n//             overall_pf_balance: {\n//                 current_pf_balance: string;\n//             }\n//         }\n//     }[];\n// }\n\n\n// // --- MOCK API FETCHER ---\n// // This function simulates fetching data from your MCP server.\n// // It uses the sample JSON data you provided.\n// const fetchAllData = async (user: string) => {\n//     console.log(`Fetching all data for user: ${user}`);\n//     // Simulating network delay\n//     await new Promise(res => setTimeout(res, 500));\n\n//     // In a real app, you would make `fetch` calls to your server endpoints.\n//     // For this example, we are returning the hardcoded JSON data directly.\n//     const netWorthResponse: { netWorthResponse: NetWorthData } = {\"netWorthResponse\":{\"assetValues\":[{\"netWorthAttribute\":\"ASSET_TYPE_MUTUAL_FUND\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"177605\"}},{\"netWorthAttribute\":\"ASSET_TYPE_EPF\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"211111\"}},{\"netWorthAttribute\":\"ASSET_TYPE_SAVINGS_ACCOUNTS\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"195297\"}},{\"netWorthAttribute\":\"ASSET_TYPE_INDIAN_SECURITIES\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"200642\"}},{\"netWorthAttribute\":\"ASSET_TYPE_US_SECURITIES\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"30071\"}}],\"liabilityValues\":[{\"netWorthAttribute\":\"LIABILITY_TYPE_OTHER_LOAN\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"42000\"}},{\"netWorthAttribute\":\"LIABILITY_TYPE_HOME_LOAN\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"17000\"}},{\"netWorthAttribute\":\"LIABILITY_TYPE_VEHICLE_LOAN\",\"value\":{\"currencyCode\":\"INR\",\"units\":\"5000\"}}],\"totalNetWorthValue\":{\"currencyCode\":\"INR\",\"units\":\"750726\"},\"accountDetailsBulkResponse\":{\"accountDetailsMap\":{\"204a015f-1e87-45b6-b96e-01b9da6835ff\":{\"accountDetails\":{\"fipId\":\"fip@nsdl\",\"maskedAccountNumber\":\"XXXXXX2724\",\"accInstrumentType\":\"ACC_INSTRUMENT_TYPE_EQUITIES\",\"fipMeta\":{\"displayName\":\"NSDL\"},\"equitySummary\":{\"currentValue\":{\"units\":\"12000\"}}}}}}}};\n//     const bankTransactionsData: BankTransactionsData = {\"bankTransactions\":[{\"bank\":\"HDFC Bank\",\"txns\":[[\"80559\",\"UPI-AISHWARYA MINI MART-Q36365093@YBL-YESB0YBLUPI-104642349580-PAYMENT FROM PHONE\",\"2025-07-09\",2,\"OTHERS\",\"-77324\"],[\"80805\",\"ACH C- TCS1STINTDIV310720-C2003055611208\",\"2025-07-09\",1,\"ATM\",\"3481\"],[\"80050\",\"UPI-DUNZO DIGITAL PRIVAT-DUNZO1.PAYU@INDUS-INDB0002201-104767620300-PAYMENT FROM PHONE\",\"2025-07-09\",2,\"CARD_PAYMENT\",\"-77614\"]]}]};\n//     const creditReportData: CreditReportData = {\"creditReportData\":{\"creditAccount\":{\"creditAccountDetails\":[{\"subscriberName\":\"HDFC Bank\",\"accountType\":\"01\",\"highestCreditOrOriginalLoanAmount\":\"50000\",\"currentBalance\":\"5000\",\"amountPastDue\":\"1000\"},{\"subscriberName\":\"ICICI Bank\",\"accountType\":\"03\",\"highestCreditOrOriginalLoanAmount\":\"110000\",\"currentBalance\":\"17000\",\"amountPastDue\":\"13000\"}]},\"score\":{\"bureauScore\":\"746\"}}};\n//     const epfData: EPFData = {\"uanAccounts\":[{\"rawDetails\":{\"est_details\":[{\"est_name\":\"KARZA TECHNOLOGIES PRIVATE LIMITED\",\"pf_balance\":{\"net_balance\":\"200000\"}},{\"est_name\":\"TSS CONSULTANCY PRIVATE LIMITED\",\"pf_balance\":{\"net_balance\":\"11111\"}}],\"overall_pf_balance\":{\"current_pf_balance\":\"211111\"}}}]};\n\n//     return {\n//         netWorth: netWorthResponse.netWorthResponse,\n//         bankTransactions: bankTransactionsData.bankTransactions,\n//         creditReport: creditReportData.creditReportData,\n//         epfDetails: epfData.uanAccounts[0].rawDetails,\n//     };\n// };\n\n\n// // --- HELPER & UI COMPONENTS ---\n// const formatCurrency = (value: string | number) => {\n//     return new Intl.NumberFormat('en-IN', {\n//       style: 'currency',\n//       currency: 'INR',\n//       minimumFractionDigits: 0,\n//       maximumFractionDigits: 0,\n//     }).format(Number(value));\n// };\n\n// const formatTitle = (title: string) => {\n//     return title.replace(/_/g, ' ').replace('ASSET TYPE', '').replace('LIABILITY TYPE', '').trim();\n// }\n\n// const CreditScoreGauge = ({ score }: { score: number }) => {\n//     const getScoreColor = (s: number) => {\n//         if (s > 750) return \"text-green-500\";\n//         if (s > 650) return \"text-yellow-500\";\n//         return \"text-red-500\";\n//     };\n//     return (\n//         <Card className=\"bg-gray-900/50\">\n//             <CardHeader>\n//                 <CardTitle>Credit Score</CardTitle>\n//                 <CardDescription>Provided by Experian</CardDescription>\n//             </CardHeader>\n//             <CardContent className=\"flex items-center justify-center py-8\">\n//                 <div className={`text-6xl font-bold ${getScoreColor(score)}`}>\n//                     {score}\n//                 </div>\n//             </CardContent>\n//         </Card>\n//     );\n// };\n\n// const NetWorthSummary = ({ data }: { data: NetWorthData }) => {\n//     const totalAssets = data?.assetValues?.reduce((sum, asset) => sum + Number(asset.value.units), 0) || 0;\n//     const totalLiabilities = data?.liabilityValues?.reduce((sum, liability) => sum + Number(liability.value.units), 0) || 0;\n\n//     return (\n//         <Card className=\"bg-gray-900/50 col-span-1 md:col-span-2\">\n//             <CardHeader>\n//                 <CardTitle>Financial Overview</CardTitle>\n//                 <CardDescription>A snapshot of your assets and liabilities.</CardDescription>\n//             </CardHeader>\n//             <CardContent className=\"space-y-4\">\n//                 <div className=\"text-center\">\n//                     <p className=\"text-sm text-gray-400\">Total Net Worth</p>\n//                     <p className=\"text-4xl font-bold text-green-400\">{formatCurrency(data?.totalNetWorthValue?.units || 0)}</p>\n//                 </div>\n//                 <div className=\"flex justify-around items-center pt-4\">\n//                     <div className=\"text-center\">\n//                         <p className=\"text-sm text-gray-400\">Total Assets</p>\n//                         <p className=\"text-2xl font-semibold text-white\">{formatCurrency(totalAssets)}</p>\n//                     </div>\n//                     <div className=\"text-center\">\n//                         <p className=\"text-sm text-gray-400\">Total Liabilities</p>\n//                         <p className=\"text-2xl font-semibold text-white\">{formatCurrency(totalLiabilities)}</p>\n//                     </div>\n//                 </div>\n//             </CardContent>\n//         </Card>\n//     )\n// };\n\n\n// // --- MAIN DASHBOARD PAGE ---\n// export default function DashboardPage() {\n//     const [data, setData] = useState<any>(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(\"\");\n//     const router = useRouter();\n\n//     useEffect(() => {\n//         const user = sessionStorage.getItem(\"mcp-user\");\n//         if (!user) {\n//             router.push(\"/\"); // Redirect to login if not authenticated\n//             return;\n//         }\n\n//         const loadData = async () => {\n//             try {\n//                 const fetchedData = await fetchAllData(user);\n//                 setData(fetchedData);\n//             } catch (err) {\n//                 setError(\"Failed to fetch financial data. Please try again later.\");\n//                 console.error(err);\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         loadData();\n//     }, [router]);\n\n//     if (isLoading) {\n//         return (\n//             <main className=\"flex items-center justify-center min-h-screen bg-black text-white\">\n//                 <Loader className=\"mr-2 h-8 w-8 animate-spin\" />\n//                 <p>Loading your financial dashboard...</p>\n//             </main>\n//         );\n//     }\n    \n//     if (error || !data) {\n//          return (\n//             <main className=\"flex flex-col items-center justify-center min-h-screen bg-black text-red-500\">\n//                 <p className=\"mb-4\">{error || \"Could not load your data.\"}</p>\n//                 <Button variant=\"secondary\" onClick={() => window.location.reload()}>Try Again</Button>\n//             </main>\n//         );\n//     }\n\n//     return (\n//         <main className=\"min-h-screen bg-black text-white p-4 sm:p-6 lg:p-8\">\n//             <header className=\"flex justify-between items-center mb-6\">\n//                 <div className=\"flex items-center gap-3\">\n//                     <Logo />\n//                     <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n//                 </div>\n//                 <Button variant=\"outline\" onClick={() => {\n//                     sessionStorage.clear();\n//                     router.push('/');\n//                 }}>Logout</Button>\n//             </header>\n\n//             <Tabs defaultValue=\"overview\" className=\"w-full\">\n//                 <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 bg-gray-900/80\">\n//                     <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n//                     <TabsTrigger value=\"accounts\">Accounts</TabsTrigger>\n//                     <TabsTrigger value=\"transactions\">Bank Transactions</TabsTrigger>\n//                     <TabsTrigger value=\"credit\">Credit Report</TabsTrigger>\n//                 </TabsList>\n\n//                 <TabsContent value=\"overview\" className=\"mt-6\">\n//                     <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n//                         <NetWorthSummary data={data.netWorth} />\n//                         <CreditScoreGauge score={Number(data.creditReport?.score?.bureauScore || 0)} />\n                        \n//                         <Card className=\"bg-gray-900/50\">\n//                             <CardHeader><CardTitle className=\"flex items-center gap-2\"><TrendingUp className=\"text-green-500\" /> Assets</CardTitle></CardHeader>\n//                             <CardContent>\n//                                 {(data.netWorth?.assetValues || []).map((asset: AssetValue) => (\n//                                     <div key={asset.netWorthAttribute} className=\"flex justify-between items-center text-sm mb-2\">\n//                                         <p className=\"text-gray-300 capitalize\">{formatTitle(asset.netWorthAttribute)}</p>\n//                                         <p className=\"font-medium\">{formatCurrency(asset.value.units)}</p>\n//                                     </div>\n//                                 ))}\n//                             </CardContent>\n//                         </Card>\n\n//                         <Card className=\"bg-gray-900/50\">\n//                             <CardHeader><CardTitle className=\"flex items-center gap-2\"><TrendingDown className=\"text-red-500\" /> Liabilities</CardTitle></CardHeader>\n//                             <CardContent>\n//                                 {(data.netWorth?.liabilityValues || []).map((liability: LiabilityValue) => (\n//                                      <div key={liability.netWorthAttribute} className=\"flex justify-between items-center text-sm mb-2\">\n//                                         <p className=\"text-gray-300 capitalize\">{formatTitle(liability.netWorthAttribute)}</p>\n//                                         <p className=\"font-medium\">{formatCurrency(liability.value.units)}</p>\n//                                     </div>\n//                                 ))}\n//                             </CardContent>\n//                         </Card>\n\n//                          <Card className=\"bg-gray-900/50\">\n//                             <CardHeader><CardTitle className=\"flex items-center gap-2\"><Briefcase className=\"text-blue-400\" /> EPF Summary</CardTitle></CardHeader>\n//                              <CardContent>\n//                                 <div className=\"flex justify-between items-center text-lg mb-2\">\n//                                     <p className=\"text-gray-300\">Total PF Balance</p>\n//                                     <p className=\"font-bold\">{formatCurrency(data.epfDetails?.overall_pf_balance?.current_pf_balance || 0)}</p>\n//                                 </div>\n//                                 {(data.epfDetails?.est_details || []).map((est: EPFEstablishment) => (\n//                                      <div key={est.est_name} className=\"flex justify-between items-center text-sm mt-4\">\n//                                         <p className=\"text-gray-400\">{est.est_name}</p>\n//                                         <p className=\"font-medium\">{formatCurrency(est.pf_balance.net_balance)}</p>\n//                                     </div>\n//                                 ))}\n//                             </CardContent>\n//                         </Card>\n//                     </div>\n//                 </TabsContent>\n\n//                 <TabsContent value=\"accounts\" className=\"mt-6\">\n//                      <Card className=\"bg-gray-900/50\">\n//                          <CardHeader><CardTitle>Account Details</CardTitle></CardHeader>\n//                          <CardContent>\n//                             <Table>\n//                                 <TableHeader>\n//                                     <TableRow>\n//                                         <TableHead>Institution</TableHead>\n//                                         <TableHead>Account Type</TableHead>\n//                                         <TableHead>Account Number</TableHead>\n//                                         <TableHead className=\"text-right\">Balance / Value</TableHead>\n//                                     </TableRow>\n//                                 </TableHeader>\n//                                 <TableBody>\n//                                     {/* CORRECTED: Safely access nested data with optional chaining and a fallback empty object */}\n//                                     {Object.values(data.netWorth?.accountDetailsBulkResponse?.accountDetailsMap || {}).map((item: {accountDetails: AccountDetailsInfo}) => (\n//                                         <TableRow key={item.accountDetails.maskedAccountNumber}>\n//                                             <TableCell className=\"font-medium\">{item.accountDetails.fipMeta.displayName}</TableCell>\n//                                             <TableCell>{formatTitle(item.accountDetails.accInstrumentType)}</TableCell>\n//                                             <TableCell>{item.accountDetails.maskedAccountNumber}</TableCell>\n//                                             <TableCell className=\"text-right font-bold\">\n//                                                 {formatCurrency(item.accountDetails.depositSummary?.currentBalance?.units || item.accountDetails.equitySummary?.currentValue?.units || '0')}\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))}\n//                                 </TableBody>\n//                             </Table>\n//                          </CardContent>\n//                      </Card>\n//                 </TabsContent>\n\n//                 <TabsContent value=\"transactions\" className=\"mt-6\">\n//                     <Card className=\"bg-gray-900/50\">\n//                         <CardHeader><CardTitle>Recent Bank Transactions</CardTitle></CardHeader>\n//                         <CardContent>\n//                              <Table>\n//                                 <TableHeader>\n//                                     <TableRow>\n//                                         <TableHead>Date</TableHead>\n//                                         <TableHead>Bank</TableHead>\n//                                         <TableHead>Description</TableHead>\n//                                         <TableHead className=\"text-right\">Amount</TableHead>\n//                                     </TableRow>\n//                                 </TableHeader>\n//                                 <TableBody>\n//                                     {(data.bankTransactions?.[0]?.txns || []).slice(0, 20).map((txn: BankTransaction, index: number) => (\n//                                         <TableRow key={index}>\n//                                             <TableCell>{txn[2]}</TableCell>\n//                                             <TableCell>{data.bankTransactions[0].bank}</TableCell>\n//                                             <TableCell className=\"text-gray-400 text-xs\">{txn[1]}</TableCell>\n//                                             <TableCell className={`text-right font-semibold ${txn[3] === 1 ? 'text-green-500' : 'text-red-500'}`}>\n//                                                 {txn[3] === 1 ? '+' : '-'} {formatCurrency(txn[0])}\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))}\n//                                 </TableBody>\n//                             </Table>\n//                         </CardContent>\n//                     </Card>\n//                 </TabsContent>\n\n//                 <TabsContent value=\"credit\" className=\"mt-6\">\n//                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n//                         <div className=\"md:col-span-1\">\n//                             <CreditScoreGauge score={Number(data.creditReport?.score?.bureauScore || 0)} />\n//                         </div>\n//                         <div className=\"md:col-span-2\">\n//                             <Card className=\"bg-gray-900/50\">\n//                                 <CardHeader><CardTitle>Loan & Credit Accounts</CardTitle></CardHeader>\n//                                 <CardContent>\n//                                     <Table>\n//                                         <TableHeader>\n//                                             <TableRow>\n//                                                 <TableHead>Lender</TableHead>\n//                                                 <TableHead>Type</TableHead>\n//                                                 <TableHead className=\"text-right\">Balance</TableHead>\n//                                                 <TableHead className=\"text-right\">Past Due</TableHead>\n//                                             </TableRow>\n//                                         </TableHeader>\n//                                         <TableBody>\n//                                             {(data.creditReport?.creditAccount?.creditAccountDetails || []).map((acc: CreditAccountDetails, index: number) => (\n//                                                 <TableRow key={`${acc.subscriberName}-${index}`}>\n//                                                     <TableCell>{acc.subscriberName}</TableCell>\n//                                                     <TableCell>Loan/Credit</TableCell>\n//                                                     <TableCell className=\"text-right\">{formatCurrency(acc.currentBalance)}</TableCell>\n//                                                     <TableCell className={`text-right ${Number(acc.amountPastDue) > 0 ? 'text-red-500 font-bold' : ''}`}>\n//                                                         {formatCurrency(acc.amountPastDue)}\n//                                                     </TableCell>\n//                                                 </TableRow>\n//                                             ))}\n//                                         </TableBody>\n//                                     </Table>\n//                                 </CardContent>\n//                             </Card>\n//                         </div>\n//                      </div>\n//                 </TabsContent>\n//             </Tabs>\n//         </main>\n//     );\n// }\n\n\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Loader, TrendingUp, TrendingDown, Briefcase } from \"lucide-react\";\nimport { Logo } from \"@/components/logo\";\nimport { McpClient } from \"@/lib/mcp-client\"; // Adjust this path if your mcp-client.ts is elsewhere\n\n// --- TYPE DEFINITIONS (Unchanged from your provided code) ---\ninterface Value {\n  currencyCode: string;\n  units: string;\n}\n\ninterface AssetValue {\n  netWorthAttribute: string;\n  value: Value;\n}\n\ninterface LiabilityValue {\n  netWorthAttribute: string;\n  value: Value;\n}\n\ninterface AccountDetailsInfo {\n    maskedAccountNumber: string;\n    accInstrumentType: string;\n    fipMeta: {\n        displayName: string;\n    }\n    depositSummary?: {\n        currentBalance: Value;\n    }\n    equitySummary?: {\n        currentValue: Value;\n    }\n}\n\ninterface NetWorthData {\n  assetValues: AssetValue[];\n  liabilityValues: LiabilityValue[];\n  totalNetWorthValue: Value;\n  accountDetailsBulkResponse?: {\n      accountDetailsMap: Record<string, { accountDetails: AccountDetailsInfo }>;\n  }\n}\n\ntype BankTransaction = [string, string, string, number, string, string];\n\ninterface BankTransactionsData {\n    bank: string;\n    txns: BankTransaction[];\n}\n\ninterface CreditAccountDetails {\n    subscriberName: string;\n    accountType: string;\n    highestCreditOrOriginalLoanAmount: string;\n    currentBalance: string;\n    amountPastDue: string;\n}\n\ninterface CreditReportData {\n    creditAccount: {\n        creditAccountDetails: CreditAccountDetails[];\n    }\n    score: {\n        bureauScore: string;\n    }\n}\n\ninterface EPFEstablishment {\n    est_name: string;\n    pf_balance: {\n        net_balance: string;\n    }\n}\n\ninterface EPFData {\n    est_details: EPFEstablishment[];\n    overall_pf_balance: {\n        current_pf_balance: string;\n    }\n}\n\n// --- HELPER & UI COMPONENTS (Unchanged) ---\nconst formatCurrency = (value: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(Number(value));\n};\n\nconst formatTitle = (title: string) => {\n    return title.replace(/_/g, ' ').replace('ASSET TYPE', '').replace('LIABILITY TYPE', '').replace('ACC INSTRUMENT TYPE', '').trim();\n}\n\nconst CreditScoreGauge = ({ score }: { score: number }) => {\n    const getScoreColor = (s: number) => {\n        if (s > 750) return \"text-green-500\";\n        if (s > 650) return \"text-yellow-500\";\n        return \"text-red-500\";\n    };\n    return (\n        <Card className=\"bg-gray-900/50\">\n            <CardHeader>\n                <CardTitle>Credit Score</CardTitle>\n                <CardDescription>Provided by Experian</CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex items-center justify-center py-8\">\n                <div className={`text-6xl font-bold ${getScoreColor(score)}`}>\n                    {score}\n                </div>\n            </CardContent>\n        </Card>\n    );\n};\n\nconst NetWorthSummary = ({ data }: { data: NetWorthData }) => {\n    const totalAssets = data?.assetValues?.reduce((sum, asset) => sum + Number(asset.value.units), 0) || 0;\n    const totalLiabilities = data?.liabilityValues?.reduce((sum, liability) => sum + Number(liability.value.units), 0) || 0;\n\n    return (\n        <Card className=\"bg-gray-900/50 col-span-1 md:col-span-2\">\n            <CardHeader>\n                <CardTitle>Financial Overview</CardTitle>\n                <CardDescription>A snapshot of your assets and liabilities.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-400\">Total Net Worth</p>\n                    <p className=\"text-4xl font-bold text-green-400\">{formatCurrency(data?.totalNetWorthValue?.units || 0)}</p>\n                </div>\n                <div className=\"flex justify-around items-center pt-4\">\n                    <div className=\"text-center\">\n                        <p className=\"text-sm text-gray-400\">Total Assets</p>\n                        <p className=\"text-2xl font-semibold text-white\">{formatCurrency(totalAssets)}</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <p className=\"text-sm text-gray-400\">Total Liabilities</p>\n                        <p className=\"text-2xl font-semibold text-white\">{formatCurrency(totalLiabilities)}</p>\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    )\n};\n\n// --- MAIN DASHBOARD PAGE ---\nexport default function DashboardPage() {\n    const [data, setData] = useState<{\n        netWorth: NetWorthData;\n        bankTransactions: BankTransactionsData[];\n        creditReport: CreditReportData;\n        epfDetails: EPFData;\n    } | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(\"\");\n    const router = useRouter();\n\n    useEffect(() => {\n        const user = sessionStorage.getItem(\"mcp-user\");\n        if (!user) {\n            router.push(\"/\"); // Redirect to login page if no user in session\n            return;\n        }\n\n        // This is the new data fetching logic that calls your MCP server\n        const fetchAndSetData = async () => {\n            setIsLoading(true);\n            setError(\"\");\n            try {\n                const mcpClient = new McpClient();\n\n                // Call all the tools concurrently for better performance\n                const [\n                    netWorthRes,\n                    bankTransactionsRes,\n                    creditReportRes,\n                    epfDetailsRes\n                ] = await Promise.all([\n                    mcpClient.callTool('fetch_net_worth'),\n                    mcpClient.callTool('fetch_bank_transactions'),\n                    mcpClient.callTool('fetch_credit_report'),\n                    mcpClient.callTool('fetch_epf_details'),\n                ]);\n\n                // Structure the data to match what the UI components expect\n                const structuredData = {\n                    netWorth: netWorthRes.netWorthResponse,\n                    bankTransactions: bankTransactionsRes.bankTransactions,\n                    creditReport: creditReportRes.creditReports[0].creditReportData,\n                    epfDetails: epfDetailsRes.uanAccounts[0].rawDetails,\n                };\n                \n                setData(structuredData);\n\n            } catch (err: any) {\n                console.error(\"Dashboard Fetch Error:\", err);\n                setError(err.message || \"An unknown error occurred while fetching your data.\");\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAndSetData();\n    }, [router]);\n\n    if (isLoading) {\n        return (\n            <main className=\"flex items-center justify-center min-h-screen bg-black text-white\">\n                <Loader className=\"mr-2 h-8 w-8 animate-spin\" />\n                <p>Connecting to MCP Server and fetching your financial data...</p>\n            </main>\n        );\n    }\n    \n    if (error || !data) {\n         return (\n            <main className=\"flex flex-col items-center justify-center min-h-screen bg-black text-white\">\n                <div className=\"bg-red-900/20 border border-red-500/50 p-6 rounded-lg text-center\">\n                    <h2 className=\"text-xl font-bold text-red-400 mb-2\">Failed to Load Dashboard</h2>\n                    <p className=\"text-red-300 mb-4\">{error}</p>\n                    <Button variant=\"secondary\" onClick={() => window.location.reload()}>Try Again</Button>\n                </div>\n            </main>\n        );\n    }\n\n    // --- JSX RENDER (Unchanged, but now powered by live data) ---\n    return (\n        <main className=\"min-h-screen bg-black text-white p-4 sm:p-6 lg:p-8\">\n            <header className=\"flex justify-between items-center mb-6\">\n                <div className=\"flex items-center gap-3\">\n                    <Logo />\n                    <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n                </div>\n                <Button variant=\"outline\" onClick={() => {\n                    // Clear all session data on logout for a clean slate\n                    sessionStorage.clear();\n                    router.push('/');\n                }}>Logout</Button>\n            </header>\n\n            <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 bg-gray-900/80\">\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"accounts\">Accounts</TabsTrigger>\n                    <TabsTrigger value=\"transactions\">Bank Transactions</TabsTrigger>\n                    <TabsTrigger value=\"credit\">Credit Report</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"mt-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                        <NetWorthSummary data={data.netWorth} />\n                        <CreditScoreGauge score={Number(data.creditReport?.score?.bureauScore || 0)} />\n                        \n                        <Card className=\"bg-gray-900/50\">\n                            <CardHeader><CardTitle className=\"flex items-center gap-2\"><TrendingUp className=\"text-green-500\" /> Assets</CardTitle></CardHeader>\n                            <CardContent>\n                                {(data.netWorth?.assetValues || []).map((asset: AssetValue) => (\n                                    <div key={asset.netWorthAttribute} className=\"flex justify-between items-center text-sm mb-2\">\n                                        <p className=\"text-gray-300 capitalize\">{formatTitle(asset.netWorthAttribute)}</p>\n                                        <p className=\"font-medium\">{formatCurrency(asset.value.units)}</p>\n                                    </div>\n                                ))}\n                            </CardContent>\n                        </Card>\n\n                        <Card className=\"bg-gray-900/50\">\n                            <CardHeader><CardTitle className=\"flex items-center gap-2\"><TrendingDown className=\"text-red-500\" /> Liabilities</CardTitle></CardHeader>\n                            <CardContent>\n                                {(data.netWorth?.liabilityValues || []).map((liability: LiabilityValue) => (\n                                     <div key={liability.netWorthAttribute} className=\"flex justify-between items-center text-sm mb-2\">\n                                        <p className=\"text-gray-300 capitalize\">{formatTitle(liability.netWorthAttribute)}</p>\n                                        <p className=\"font-medium\">{formatCurrency(liability.value.units)}</p>\n                                    </div>\n                                ))}\n                            </CardContent>\n                        </Card>\n\n                         <Card className=\"bg-gray-900/50\">\n                            <CardHeader><CardTitle className=\"flex items-center gap-2\"><Briefcase className=\"text-blue-400\" /> EPF Summary</CardTitle></CardHeader>\n                             <CardContent>\n                                <div className=\"flex justify-between items-center text-lg mb-2\">\n                                    <p className=\"text-gray-300\">Total PF Balance</p>\n                                    <p className=\"font-bold\">{formatCurrency(data.epfDetails?.overall_pf_balance?.current_pf_balance || 0)}</p>\n                                </div>\n                                {(data.epfDetails?.est_details || []).map((est: EPFEstablishment) => (\n                                     <div key={est.est_name} className=\"flex justify-between items-center text-sm mt-4\">\n                                        <p className=\"text-gray-400\">{est.est_name}</p>\n                                        <p className=\"font-medium\">{formatCurrency(est.pf_balance.net_balance)}</p>\n                                    </div>\n                                ))}\n                            </CardContent>\n                        </Card>\n                    </div>\n                </TabsContent>\n\n                <TabsContent value=\"accounts\" className=\"mt-6\">\n                     <Card className=\"bg-gray-900/50\">\n                         <CardHeader><CardTitle>Account Details</CardTitle></CardHeader>\n                         <CardContent>\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Institution</TableHead>\n                                        <TableHead>Account Type</TableHead>\n                                        <TableHead>Account Number</TableHead>\n                                        <TableHead className=\"text-right\">Balance / Value</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {Object.values(data.netWorth?.accountDetailsBulkResponse?.accountDetailsMap || {}).map((item: {accountDetails: AccountDetailsInfo}) => (\n                                        <TableRow key={item.accountDetails.maskedAccountNumber}>\n                                            <TableCell className=\"font-medium\">{item.accountDetails.fipMeta.displayName}</TableCell>\n                                            <TableCell className=\"capitalize\">{formatTitle(item.accountDetails.accInstrumentType)}</TableCell>\n                                            <TableCell>{item.accountDetails.maskedAccountNumber}</TableCell>\n                                            <TableCell className=\"text-right font-bold\">\n                                                {formatCurrency(item.accountDetails.depositSummary?.currentBalance?.units || item.accountDetails.equitySummary?.currentValue?.units || '0')}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                         </CardContent>\n                     </Card>\n                </TabsContent>\n\n                <TabsContent value=\"transactions\" className=\"mt-6\">\n                    <Card className=\"bg-gray-900/50\">\n                        <CardHeader><CardTitle>Recent Bank Transactions</CardTitle></CardHeader>\n                        <CardContent>\n                             <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Date</TableHead>\n                                        <TableHead>Bank</TableHead>\n                                        <TableHead>Description</TableHead>\n                                        <TableHead className=\"text-right\">Amount</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {(data.bankTransactions?.[0]?.txns || []).slice(0, 25).map((txn: BankTransaction, index: number) => (\n                                        <TableRow key={index}>\n                                            <TableCell>{txn[2]}</TableCell>\n                                            <TableCell>{data.bankTransactions[0].bank}</TableCell>\n                                            <TableCell className=\"text-gray-400 text-xs\">{txn[1]}</TableCell>\n                                            <TableCell className={`text-right font-semibold ${txn[3] === 1 ? 'text-green-500' : 'text-red-500'}`}>\n                                                {txn[3] === 1 ? '+' : '-'} {formatCurrency(txn[0])}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n                </TabsContent>\n\n                <TabsContent value=\"credit\" className=\"mt-6\">\n                     <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                        <div className=\"md:col-span-1\">\n                            <CreditScoreGauge score={Number(data.creditReport?.score?.bureauScore || 0)} />\n                        </div>\n                        <div className=\"md:col-span-2\">\n                            <Card className=\"bg-gray-900/50\">\n                                <CardHeader><CardTitle>Loan & Credit Accounts</CardTitle></CardHeader>\n                                <CardContent>\n                                    <Table>\n                                        <TableHeader>\n                                            <TableRow>\n                                                <TableHead>Lender</TableHead>\n                                                <TableHead>Type</TableHead>\n                                                <TableHead className=\"text-right\">Balance</TableHead>\n                                                <TableHead className=\"text-right\">Past Due</TableHead>\n                                            </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                            {(data.creditReport?.creditAccount?.creditAccountDetails || []).map((acc: CreditAccountDetails, index: number) => (\n                                                <TableRow key={`${acc.subscriberName}-${index}`}>\n                                                    <TableCell>{acc.subscriberName}</TableCell>\n                                                    <TableCell>Loan/Credit</TableCell>\n                                                    <TableCell className=\"text-right\">{formatCurrency(acc.currentBalance)}</TableCell>\n                                                    <TableCell className={`text-right ${Number(acc.amountPastDue) > 0 ? 'text-red-500 font-bold' : ''}`}>\n                                                        {formatCurrency(acc.amountPastDue)}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </CardContent>\n                            </Card>\n                        </div>\n                     </div>\n                </TabsContent>\n            </Tabs>\n        </main>\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}