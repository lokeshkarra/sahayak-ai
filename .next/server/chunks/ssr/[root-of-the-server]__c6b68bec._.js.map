{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/ai/flows/voice-query.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A voice query AI agent for financial insights.\n *\n * - voiceQuery - A function that handles voice queries and returns financial insights.\n * - VoiceQueryInput - The input type for the voiceQuery function.\n * - VoiceQueryOutput - The return type for the voiceQuery function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VoiceQueryInputSchema = z.object({\n  query: z.string().describe('The voice query from the user.'),\n  financialData: z.string().describe('Consolidated financial data, including assets, liabilities, net worth, etc.'),\n});\nexport type VoiceQueryInput = z.infer<typeof VoiceQueryInputSchema>;\n\nconst VoiceQueryOutputSchema = z.object({\n  insight: z.string().describe('The financial insight generated from the voice query.'),\n  audio: z.any().describe('The audio response for the financial insight.'),\n});\nexport type VoiceQueryOutput = z.infer<typeof VoiceQueryOutputSchema>;\n\nexport async function voiceQuery(input: VoiceQueryInput): Promise<VoiceQueryOutput> {\n  return voiceQueryFlow(input);\n}\n\nconst voiceQueryPrompt = ai.definePrompt({\n  name: 'voiceQueryPrompt',\n  input: {schema: VoiceQueryInputSchema},\n  output: {schema: z.object({insight: z.string()})},\n  prompt: `You are **Personal Chanakya**, a strategic AI finance advisor built on Indian financial wisdom and powered by Gemini.\n\nYou help users make sense of their financial life using real data from the Fi MCP Server. The user will provide structured financial data in JSON format.\n\nYour response should be concise and suitable for a voice assistant.\n\n---\n\n### ðŸ§  Your Behavior:\n\n-   Be **conversational**, **wise**, and **strategic** like Chanakya.\n-   Focus on **clarity**, **actionable suggestions**, and **trust**.\n-   Donâ€™t give generic advice â€” always use the userâ€™s actual data.\n-   It is crucial that you respond in the same language as the user's question.\n\n---\n\n### ðŸ§¾ Input Data\n\nHere is the user's financial data in JSON format:\n{{{financialData}}}\n\n---\n\nNow, answer the user's question based on their data. Keep the answer concise for a voice response.\n\nUser Question: {{{query}}}`,\n});\n\nconst voiceQueryFlow = ai.defineFlow(\n  {\n    name: 'voiceQueryFlow',\n    inputSchema: VoiceQueryInputSchema,\n    outputSchema: VoiceQueryOutputSchema,\n  },\n  async input => {\n    const {output: textOutput} = await voiceQueryPrompt(input);\n    const { media } = await ai.generate({\n      model: 'googleai/gemini-2.5-flash-preview-tts',\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: { voiceName: 'Algenib' },\n          },\n        },\n      },\n      prompt: textOutput!.insight,\n    });\n    if (!media) {\n      throw new Error('no media returned');\n    }\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n    const wavData = await toWav(audioBuffer);\n    return {\n      insight: textOutput!.insight,\n      audio: 'data:audio/wav;base64,' + wavData,\n    };\n  }\n);\n\nasync function toWav(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const wav = require('wav');\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    let bufs = [] as any[];\n    writer.on('error', reject);\n    writer.on('data', function (d) {\n      bufs.push(d);\n    });\n    writer.on('end', function () {\n      resolve(Buffer.concat(bufs).toString('base64'));\n    });\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,OAAO,uIAAA,CAAA,IAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;AAC1B;AAGO,eAAe,WAAW,KAAsB;IACrD,OAAO,eAAe;AACxB;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqB;IACrC,QAAQ;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAE;IAAE;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;0BA0Be,CAAC;AAC3B;AAEA,MAAM,iBAAiB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,QAAQ,UAAU,EAAC,GAAG,MAAM,iBAAiB;IACpD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAClC,OAAO;QACP,QAAQ;YACN,oBAAoB;gBAAC;aAAQ;YAC7B,cAAc;gBACZ,aAAa;oBACX,qBAAqB;wBAAE,WAAW;oBAAU;gBAC9C;YACF;QACF;QACA,QAAQ,WAAY,OAAO;IAC7B;IACA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,cAAc,OAAO,IAAI,CAC7B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;IAEF,MAAM,UAAU,MAAM,MAAM;IAC5B,OAAO;QACL,SAAS,WAAY,OAAO;QAC5B,OAAO,2BAA2B;IACpC;AACF;AAGF,eAAe,MACb,OAAe,EACf,WAAW,CAAC,EACZ,OAAO,KAAK,EACZ,cAAc,CAAC;IAEf,8DAA8D;IAC9D,MAAM;IACN,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,IAAI,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,IAAI,OAAO,EAAE;QACb,OAAO,EAAE,CAAC,SAAS;QACnB,OAAO,EAAE,CAAC,QAAQ,SAAU,CAAC;YAC3B,KAAK,IAAI,CAAC;QACZ;QACA,OAAO,EAAE,CAAC,OAAO;YACf,QAAQ,OAAO,MAAM,CAAC,MAAM,QAAQ,CAAC;QACvC;QAEA,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;;;IAnGsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/.next-internal/server/app/%28protected%29/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {voiceQuery as '4029509e3bdf128390f536ca203c2aa20ffe9a7d1f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/app/%28protected%29/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(protected)/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(protected)/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/lokeshkarra/Downloads/pilot-project/src/app/%28protected%29/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(protected)/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(protected)/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}